#!/usr/bin/env python

"""
# recvneo - Send Receiver for AlphaSmart Neo

by Amar Kurani

* <https://github.com/akurani>
* <http://amarkurani.com>

## Readme

See the accompanying readme for more information.

## Licensed under GPL v3

Copyright Â© 2016 by Amar P. Kurani.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


import argparse
import codecs
import datetime
import logging
import os
import re
import select
import sys
import string
import termios
import time
import tty


DEFAULT_TIMEOUT = 3  # in seconds

EXIT_KEY = '\x1b'
EXIT_KEY_TEXT = "[esc]"
WORD_TERMINATING_CHARACTERS = string.whitespace + ".?!:;\""


class NeoReceiverException(Exception):
    def __init__(self, msg, error_code=1):
        Exception.__init__(self)
        self.msg = msg
        self.error_code = error_code

    def __str__(self):
        return "%s (%d)" % (self.msg, self.error_code)


class NeoReceiverEarlyExit(NeoReceiverException):
    pass


class NeoReceiver(object):
    def __init__(self):
        self.logger = self.create_logger()
        self.now = time.localtime()

    def create_logger(self):
        logger = logging.getLogger("recvneo")
        logger.setLevel(logging.INFO)
        streamer = logging.StreamHandler(stream=sys.stdout)
        formatter = logging.Formatter('<%(name)s> %(message)s')
        streamer.setFormatter(formatter)
        logger.addHandler(streamer)
        return logger

    def check_timeout(self, value):
        try:
            timeout = int(value)
            if timeout <= 0:
                raise argparse.ArgumentTypeError("timeout must be an integer greater than 0: %d" % timeout)
            return timeout
        except ValueError:
            raise argparse.ArgumentTypeError("timeout must be an integer: %s" % value)

    def default_filename(self):
        return "neotext--%s.txt" % time.strftime("%Y-%m-%d--%H-%M-%S", self.now)

    def numbered_filename(self, filename):
        basename, extension = os.path.splitext(filename)
        max_number = -1
        pattern = re.compile("%s-(?P<number>[0-9]{4})%s" % (basename, extension))  # extension has the '.'
        for root, dirs, files in os.walk(os.getcwd()):
            for f in files:
                if root == os.getcwd():  # only check files in same directory, not subdirectories.
                    matches = pattern.match(f)
                    if matches:
                        number = int(matches.group("number"))
                        if number > max_number:
                            max_number = number
        return "%s-%04d%s" % (basename, max_number + 1, extension)

    def have_neo_data(self):
        return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

    def receive_neo_data(self, filename, echo=True, mode='w', raw_text=False, timeout=DEFAULT_TIMEOUT):
        self.logger.info("Press the 'send' button on the Neo to transmit the text into: %s" % filename)
        self.logger.info("Press the %s key on the *computer* to exit *before* initiating the 'send' operation." % EXIT_KEY_TEXT)
        self.logger.info("Press the [esc] key on the *Neo* and wait for time-out to exit *after* initiating the 'send' operation.")
        with codecs.open(filename, mode, "utf-8") as outfile:
            num_neo_char = 0
            num_neo_word = 0
            old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            try:
                last_neo_char = ''
                neo_char = ''
                first_input = False
                start_timeout_time = time.time()
                start_transmission_time = 0

                while True:
                    if self.have_neo_data():
                        last_neo_char = neo_char
                        neo_char = sys.stdin.read(1)

                        # Only exit early if EXIT_KEY is pressed on the computer before receiving Neo text.
                        # Otherwise, the Neo text will pollute the bash shell.
                        if not first_input and neo_char == EXIT_KEY:
                            raise NeoReceiverEarlyExit("Exiting. Warning: %s has already been opened and potentially modified." % filename)

                        num_neo_char += 1
                        if (last_neo_char not in WORD_TERMINATING_CHARACTERS) and (neo_char in WORD_TERMINATING_CHARACTERS):
                            num_neo_word += 1

                        if not first_input:
                            first_input = True
                            start_transmission_time = time.time()
                            self.logger.info("Receiving text from the Neo. See the Neo's screen for transmission progress....")

                        outfile.write(neo_char)

                        if echo:
                            sys.stdout.write(neo_char)
                            sys.stdout.flush()

                        start_timeout_time = time.time()
                    else:
                        if first_input and (time.time() - start_timeout_time > timeout):
                            break

                if neo_char not in WORD_TERMINATING_CHARACTERS:
                    num_neo_word += 1  # capture the last word

                if neo_char != '\n' and not raw_text:
                    outfile.write('\n')
                    num_neo_char += 1
                    print("")
                    self.logger.info("Appended newline to file.")

            finally:
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

            self.logger.info("Finished receiving text from the Neo:\n\tFile: %s\n\tCharacters: %d\n\tWords (actual): %d\n\tWords (6 characters): %d\n\tTransmission time: %s" %
                             (filename, num_neo_char, num_neo_word, num_neo_char / 6, str(datetime.timedelta(seconds=(time.time() - start_transmission_time - timeout)))))

    def validate_text_file(self, filename):
        if not os.path.exists(filename):
            raise NeoReceiverException("%s does not exist." % filename)
        try:
            with codecs.open(filename, encoding='utf-8', errors='strict') as neo_file:
                for n in neo_file:
                    pass
        except UnicodeDecodeError as e:
            raise NeoReceiverException("%s is NOT a valid UTF-8 file/\n" % filename)
        except Exception as e:
            raise NeoReceiverException("%s is NOT a valid UTF8-file:\n%s\n" % str(e))


def main():
    ret_val = 1
    try:
        neo = NeoReceiver()

        parser = argparse.ArgumentParser(description="Saves text received via an AlphaSmart Neo's 'send' function into a UTF-8 text file. Run this script, and then hit the 'send' button on the Neo.")
        parser.add_argument("filename", action="store", nargs="?", default=neo.default_filename(), help="Optional name of the UTF-8 text file which will store the Neo text. Default = a generic name with timestamp (e.g., %s)." % neo.default_filename())
        parser.add_argument("-e", "--echo", action="store_true", help="Echos the Neo text to the console as it's received.")
        parser.add_argument("-m", "--mode", action="store", choices=['write', 'w', 'overwrite', 'o', 'append', 'a'], default="write", help="File-write mode: 'write' or 'w' to a new file (failing if it already exists); 'overwrite' or 'o' an existing file (creating one if it doesn't exist); 'append' or 'a' to an existing file (creating one if it doesn't exist). Default = write.")
        parser.add_argument("-n", "--numbered", action="store_true", help="Appends a '-####' numerical suffix to the filename where the number is one larger than what's found in similiarly named files in the same directory. E.g., neotext-0001.txt, neotext-0002.txt, etc.")
        parser.add_argument("-r", "--rawtext", action="store_true", help="By default, a newline is appended to the text if it doesn't already end with one. Use this flag to only save the raw text.")
        parser.add_argument("-t", "--timeout", action="store", type=neo.check_timeout, default=DEFAULT_TIMEOUT, help="Number of seconds to wait for more Neo input before terminating. The timer starts after the first input is received. Default = %d seconds." % DEFAULT_TIMEOUT)
        parser.add_argument("-w", "--whisper", action="store_true", help="Only print warning and error messages. Stay silent otherwise.")

        args = parser.parse_args()

        if args.whisper:
            neo.logger.setLevel(logging.WARN)

        filename = args.filename
        if args.numbered:
            filename = neo.numbered_filename(filename)

        if (args.mode == "write" or args.mode == "w") and os.path.exists(filename):
            raise NeoReceiverException("%s already exists. Exiting. (If you wish to overwrite, set the mode (-m/--mode) to 'overwrite')." % filename)
        mode = 'w'
        if args.mode == "append" or args.mode == "a":
            mode = 'a'

        neo.receive_neo_data(filename, echo=args.echo, mode=mode, raw_text=args.rawtext, timeout=args.timeout)
        neo.validate_text_file(filename)

        ret_val = 0

    except NeoReceiverEarlyExit as e:
        neo.logger.warn(str(e))
        ret_val = e.error_code

    except NeoReceiverException as e:
        neo.logger.error(str(e))
        ret_val = e.error_code

    except Exception as e:
        neo.logger.error("%s" % str(e))
        ret_val = 1

    finally:
        print("")
        return ret_val


if __name__ == '__main__':
    sys.exit(main())
